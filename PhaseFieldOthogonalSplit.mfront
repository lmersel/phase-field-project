@DSL Default;
@Author Lamia Mersel;
@Date 10 / 10 / 2022;
@Behaviour PhaseFieldDisplacementNguyenSplit;

@OrthotropicBehaviour<Pipe>;
/*
@StrainMeasure GreenLagrange{save_strain : true, save_stress : false};
*/
/*
@ComputeStiffnessTensor<UnAltered>{
    // YoungModulus1 YoungModulus2 YoungModulus3
    7.8e+10, 2.64233e+11, 3.32e+11,
    // PoissonRatio12 PoissonRatio23 PoissonRatio13
    0.13, 0.24, 0.18,
    // ShearModulus12 ShearModulus23 ShearModulus13
    4.8e+10, 1.16418e+11, 7.8e+10};
*/
@MaterialProperty stress Yg;
Yg.setGlossaryName("YoungModulus");
@MaterialProperty real nu;
nu.setGlossaryName("PoissonRatio");
@Parameter real kres = 1e-6;  // residual stiffness
@ComputeStiffnessTensor<UnAltered> { "Yg" , "nu" };

@Includes {
#ifndef TFEL_MATH_ST2TOST2_DIAGONALIZE
#define TFEL_MATH_ST2TOST2_DIAGONALIZE

  namespace tfel::math {

    /*!
     * \return the eigenvalues and eigen tensors of the of a given orthotropic
     * stiffness tensor, as well as its positive square root and inverse of the positive square roots
     */
    template <unsigned short N, typename ValueType>
    std::tuple<
        tvector<StensorDimeToSize<N>::value, ValueType>,
        tvector<StensorDimeToSize<N>::value, stensor<N, base_type<ValueType>>>,
        const st2tost2<N, ValueType>,
        const st2tost2<N, ValueType>>
    diagonalize(const st2tost2<N, ValueType> &C) {
      using real = base_type<ValueType>;
      auto e = [](const unsigned short i) constexpr {
        auto s = stensor<N, real>(real(0));
        s[i] = 1;
        return s;
      };
      constexpr const auto cste = Cste<ValueType>::sqrt2;
      constexpr auto e1 = e(0);
      constexpr auto e2 = e(1);
      constexpr auto e3 = e(2);
      auto tmp = stensor<3u, ValueType>{C(0, 0),        C(1, 1),
                                        C(2, 2),        cste * C(0, 1),
                                        cste * C(0, 2), cste * C(1, 2)};
      const auto [vp, m] = tmp.template computeEigenVectors<
          stensor_common::FSESJACOBIEIGENSOLVER>();
      auto ns = tvector<StensorDimeToSize<N>::value, stensor<N, real>>{};
      ns[0] = m(0, 0) * e1 + m(1, 0) * e2 + m(2, 0) * e3;
      ns[1] = m(0, 1) * e1 + m(1, 1) * e2 + m(2, 1) * e3;
      ns[2] = m(0, 2) * e1 + m(1, 2) * e2 + m(2, 2) * e3;
      // std::cout << ns << std::endl ;

      if constexpr (N == 1) {
        // pos and neg square root of stiffness tensor C
        const auto Cp1_2 = power<1,2>(vp(0)) * (ns[0] ^ ns[0]) +
                           power<1,2>(vp(1)) * (ns[1] ^ ns[1]) +
                           power<1,2>(vp(2)) * (ns[2] ^ ns[2]);
        const auto Cn1_2 = power<-1, 2>(vp(0)) * (ns[0] ^ ns[0]) +
                           power<-1, 2>(vp(1)) * (ns[1] ^ ns[1]) +
                           power<-1, 2>(vp(2)) * (ns[2] ^ ns[2]);
        return {vp, ns, Cp1_2, Cn1_2};
      } else if constexpr (N == 2) {
        ns[3] = e(3);
        const auto Cp1_2 = power<1, 2>(vp(0)) * (ns[0] ^ ns[0]) +
                           power<1, 2>(vp(1)) * (ns[1] ^ ns[1]) +
                           power<1, 2>(vp(2)) * (ns[2] ^ ns[2]) +
                           power<1, 2>(C(3, 3)) * (ns[3] ^ ns[3]);
        const auto Cn1_2 = power<-1, 2>(vp(0)) * (ns[0] ^ ns[0]) +
                           power<-1, 2>(vp(1)) * (ns[1] ^ ns[1]) +
                           power<-1, 2>(vp(2)) * (ns[2] ^ ns[2]) +
                           power<-1, 2>(C(3, 3)) * (ns[3] ^ ns[3]);
        return {tvector<4u, ValueType>{vp(0), vp(1), vp(2), C(3, 3)}, ns, Cp1_2,
                Cn1_2};
      } else {
        ns[3] = e(3);
        ns[4] = e(4);
        ns[5] = e(5);
        const auto Cp1_2 = power<1, 2>(vp(0)) * (ns[0] ^ ns[0]) +
                           power<1, 2>(vp(1)) * (ns[1] ^ ns[1]) +
                           power<1, 2>(vp(2)) * (ns[2] ^ ns[2]) +
                           power<1, 2>(C(3, 3)) * (ns[3] ^ ns[3]) +
                           power<1, 2>(C(4, 4)) * (ns[4] ^ ns[4]) +
                           power<1, 2>(C(5, 5)) * (ns[5] ^ ns[5]);
        const auto Cn1_2 = power<-1, 2>(vp(0)) * (ns[0] ^ ns[0]) +
                           power<-1, 2>(vp(1)) * (ns[1] ^ ns[1]) +
                           power<-1, 2>(vp(2)) * (ns[2] ^ ns[2]) +
                           power<-1, 2>(C(3, 3)) * (ns[3] ^ ns[3]) +
                           power<-1, 2>(C(4, 4)) * (ns[4] ^ ns[4]) +
                           power<-1, 2>(C(5, 5)) * (ns[5] ^ ns[5]);
        return {tvector<6u, ValueType>{vp(0), vp(1), vp(2), C(3, 3), C(4, 4),
                                       C(5, 5)},
                ns, Cp1_2, Cn1_2};
      }
    }  // end of diagonalize

  }  // end of namespace tfel::math

#endif
}

@StateVariable real H;
H.setEntryName("HistoryFunction");

@StateVariable real psi_p;
psi_p.setEntryName("PositiveEnergyDensity");

@ExternalStateVariable real d;
d.setGlossaryName("Damage");

@Integrator {
  constexpr const strain emin = 1.e-12;
  constexpr const auto id4 = Stensor4::Id();
  constexpr const auto esolver = StrainStensor::FSESJACOBIEIGENSOLVER;
  // damage at the end of the time step
  const auto d_ets = d + dd;
  // degradation function
  const auto g = power<2>(1 - d_ets);// + gmin;
  // call diagonalize() function
  auto [vp, ns, Dp1_2, Dn1_2] = diagonalize(D);
  // positive part
  const auto f = [](const real x) { return x > 0 ? x : 0; };
  // derivative of the positive part
  const auto df = [&emin](const real x) {
    return std::abs(x) < emin ? 0.5 : ((x < 0) ? 0 : 1);
  };
  // total strain
  const auto e = eto + deto;
  // transformed strain tensor
  const auto et = eval(Dp1_2 * e);
  // projector of the transformed strain tensor on its positive part
  const auto [etp,Ptp] = et.template computeIsotropicFunctionAndDerivative<esolver>(
      f, df, emin * 0.1);
  // projector of the transformed strain tensor on its negative part
  const auto Ptn = id4 - Ptp;
  //
  const auto Pp = Dn1_2 * Ptp * Dp1_2;
  const auto Pn = Dn1_2 * Ptn * Dp1_2;
  //
  const auto Dd = g * transpose(Pp) * D * Pp + transpose(Pn) * D * Pn;
  sig = Dd * e;
  //std::cout << "sig: " << sig << std::endl;
  // energy density
  const auto ep = Dn1_2 * etp;
  //std::cout << "ep: " << ep << std::endl;
  psi_p = 0.5*(ep|(D*ep));
  //std::cout << "psi_p: " << psi_p << std::endl;
  H = max(H, psi_p);

  //
  static_cast<void>(computeTangentOperator_);
}
